{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ContactDeck.js\";\nimport ContactCard from './ContactCard';\nimport HttpService from '../../services/HttpService';\nimport React, { useState, useEffect } from \"react\";\n\nfunction ContactDeck(props) {\n  const [contactList, updateContactList] = useState({\n    users: [],\n    success: false\n  });\n\n  function getAllUsers() {\n    if (contactList.success === false) {\n      const http = new HttpService();\n      let registered_users = \"user/get-registered-users\";\n      const tokenId = \"user-token\";\n      return http.getData(registered_users, tokenId).then(data => {\n        console.log(JSON.stringify(data));\n        updateContactList({\n          users: data.users,\n          success: true\n        });\n        return data;\n      }).catch(error => {\n        console.log(error);\n        return error;\n      });\n    }\n  }\n\n  getAllUsers();\n  let contacts = contactList.users.map(item => /*#__PURE__*/React.createElement(ContactCard, {\n    key: item.id,\n    user: item,\n    thisUser: props.userProf,\n    updateConnections: props.updateConnections,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 50\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, contactList.success ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, contacts) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, \"Loading...\")));\n}\n\nexport default ContactDeck;","map":{"version":3,"sources":["/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ContactDeck.js"],"names":["ContactCard","HttpService","React","useState","useEffect","ContactDeck","props","contactList","updateContactList","users","success","getAllUsers","http","registered_users","tokenId","getData","then","data","console","log","JSON","stringify","catch","error","contacts","map","item","id","userProf","updateConnections"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AAEvB,QAAM,CAACC,WAAD,EAAcC,iBAAd,IAAmCL,QAAQ,CAC7C;AACIM,IAAAA,KAAK,EAAC,EADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GAD6C,CAAjD;;AAOA,WAASC,WAAT,GAAsB;AAClB,QAAIJ,WAAW,CAACG,OAAZ,KAAwB,KAA5B,EAAkC;AAC9B,YAAME,IAAI,GAAG,IAAIX,WAAJ,EAAb;AACA,UAAIY,gBAAgB,GAAG,2BAAvB;AACA,YAAMC,OAAO,GAAG,YAAhB;AAEA,aAAOF,IAAI,CAACG,OAAL,CAAaF,gBAAb,EAA8BC,OAA9B,EAAuCE,IAAvC,CAA4CC,IAAI,IAAE;AACrDC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACAT,QAAAA,iBAAiB,CACb;AACIC,UAAAA,KAAK,EAAEQ,IAAI,CAACR,KADhB;AAEIC,UAAAA,OAAO,EAAE;AAFb,SADa,CAAjB;AAMA,eAAOO,IAAP;AACH,OATM,EASJK,KATI,CASGC,KAAD,IAAU;AACfL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,eAAOA,KAAP;AACC,OAZE,CAAP;AAaH;AACJ;;AAEDZ,EAAAA,WAAW;AAEX,MAAIa,QAAQ,GAAGjB,WAAW,CAACE,KAAZ,CAAkBgB,GAAlB,CAAsBC,IAAI,iBAAI,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAIA,IAAI,CAACC,EAAzB;AAA6B,IAAA,IAAI,EAAED,IAAnC;AAAyC,IAAA,QAAQ,EAAIpB,KAAK,CAACsB,QAA3D;AAAqE,IAAA,iBAAiB,EAAItB,KAAK,CAACuB,iBAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA9B,CAAf;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEItB,WAAW,CAACG,OAAZ,gBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCc,QADD,CADJ,gBAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,CAPR,CADJ;AAcH;;AAED,eAAenB,WAAf","sourcesContent":["import ContactCard from './ContactCard'\nimport HttpService from '../../services/HttpService'\nimport React,{useState, useEffect} from \"react\"\n\nfunction ContactDeck(props){\n\n    const [contactList, updateContactList] = useState(\n        {\n            users:[],\n            success: false\n        }\n    )\n    \n    function getAllUsers(){\n        if (contactList.success === false){\n            const http = new HttpService();\n            let registered_users = \"user/get-registered-users\";\n            const tokenId = \"user-token\";\n\n            return http.getData(registered_users,tokenId).then(data=>{\n                console.log(JSON.stringify(data));\n                updateContactList(\n                    {\n                        users: data.users,\n                        success: true  \n                    }\n                )\n                return data;\n            }).catch((error)=> {\n                console.log(error)\n                return error; \n                });\n        }\n    }\n\n    getAllUsers()\n\n    let contacts = contactList.users.map(item => <ContactCard key = {item.id} user={item} thisUser = {props.userProf} updateConnections = {props.updateConnections}/>)\n\n    return (\n        <div>\n            {\n            contactList.success?\n                <div>\n                {contacts}\n                </div>\n            :\n                <div>\n                <h1>Loading...</h1>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ContactDeck"]},"metadata":{},"sourceType":"module"}