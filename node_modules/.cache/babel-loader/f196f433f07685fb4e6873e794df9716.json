{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshpatel/Downloads/YOUTUBE-REACT-MULTIAUTH-master/src/Gaurd.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nexport const Gaurd = ({\n  component: Component,\n  token: Token,\n  routeRedirect,\n  ...rest\n}) => /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n  render: props => localStorage.getItem(Token) ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(Redirect, {\n    to: {\n      pathname: routeRedirect,\n      state: {\n        from: props.location\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 15\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }\n}));","map":{"version":3,"sources":["/Users/yogeshpatel/Downloads/YOUTUBE-REACT-MULTIAUTH-master/src/Gaurd.js"],"names":["React","Route","Redirect","Gaurd","component","Component","token","Token","routeRedirect","rest","props","localStorage","getItem","pathname","state","from","location"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,OAAQ,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,KAAK,EAACC,KAA9B;AAAoCC,EAAAA,aAApC;AAAmD,KAAGC;AAAtD,CAAD,kBAClB,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,EAAA,MAAM,EAAEC,KAAK,IAC1BC,YAAY,CAACC,OAAb,CAAqBL,KAArB,iBACM,oBAAC,SAAD,oBAAeG,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADN,gBAEM,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AAAEG,MAAAA,QAAQ,EAAEL,aAAZ;AAA2BM,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEL,KAAK,CAACM;AAAd;AAAlC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADI","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nexport  const Gaurd = ({ component: Component, token:Token,routeRedirect, ...rest}) => (\n    <Route {...rest} render={props => (\n        localStorage.getItem(Token)\n            ? <Component {...props} />\n            : <Redirect to={{ pathname: routeRedirect, state: { from: props.location } }} />\n    )} />\n)\n"]},"metadata":{},"sourceType":"module"}