{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ProfileView.js\";\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Card } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadUserAction } from '../../store/actions/User/ProfileActions';\nimport { useStyles } from '../../styles';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport ContactDeck from './ContactDeck';\nimport ConnectionDeck from './ConnectionDeck';\nimport HttpService from '../../services/HttpService';\nexport default function ProfileView() {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const userProfile = useSelector(state => state.userProfile.userProfile);\n  useEffect(() => {\n    dispatch(loadUserAction());\n  }, [dispatch]);\n  const [connectionsListParent, updateConnectionsListParent] = useState({\n    connections: [],\n    success: false\n  });\n\n  function getAllConnections() {\n    if (userProfile.success === true && connectionsListParent.success === false) {\n      const http = new HttpService();\n      let get_connections_url = \"user/get-connected-users\";\n      const tokenId = \"user-token\";\n      let body = {\n        email: userProfile.user.email\n      };\n      return http.postData(body, get_connections_url, tokenId).then(data => {\n        console.log(JSON.stringify(data));\n        updateConnectionsListParent({\n          connections: data.result,\n          success: true\n        });\n        return data;\n      }).catch(error => {\n        console.log(error);\n        return error;\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fullWidthProfile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, userProfile != \"\" && userProfile.success == true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 33\n    }\n  }, \"Name: \"), userProfile.user.name), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 33\n    }\n  }, \"Email: \"), userProfile.user.email), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 33\n    }\n  }, \"Account Creation Date: \"), userProfile.user.created_at)) : userProfile.success == false ? userProfile.message : /*#__PURE__*/React.createElement(Skeleton, {\n    variant: \"rect\",\n    width: 210,\n    height: 118,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Contacts:\"), /*#__PURE__*/React.createElement(ContactDeck, {\n    userProf: userProfile,\n    updateConnections: updateConnectionsListParent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"Connections:\"), /*#__PURE__*/React.createElement(ConnectionDeck, {\n    userProf: userProfile,\n    connectionsList: connectionsListParent,\n    updateConnections: getAllConnections,\n    updateConnectionList: updateConnectionsListParent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ProfileView.js"],"names":["React","useEffect","useState","Card","useDispatch","useSelector","loadUserAction","useStyles","Skeleton","ContactDeck","ConnectionDeck","HttpService","ProfileView","dispatch","classes","userProfile","state","connectionsListParent","updateConnectionsListParent","connections","success","getAllConnections","http","get_connections_url","tokenId","body","email","user","postData","then","data","console","log","JSON","stringify","result","catch","error","fullWidthProfile","name","created_at","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAAQC,IAAR,QAAmB,mBAAnB;AACA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,SAAQC,cAAR,QAA6B,yCAA7B;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,eAAe,SAASC,WAAT,GAAuB;AAElC,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,OAAO,GAAGP,SAAS,EAAzB;AACA,QAAMQ,WAAW,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACD,WAAN,CAAkBA,WAA5B,CAA/B;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACH,GAFQ,EAEN,CAACO,QAAD,CAFM,CAAT;AAIA,QAAM,CAACI,qBAAD,EAAwBC,2BAAxB,IAAuDhB,QAAQ,CACjE;AACIiB,IAAAA,WAAW,EAAC,EADhB;AAEIC,IAAAA,OAAO,EAAE;AAFb,GADiE,CAArE;;AAOA,WAASC,iBAAT,GAA4B;AACxB,QAAIN,WAAW,CAACK,OAAZ,KAAwB,IAAxB,IAAgCH,qBAAqB,CAACG,OAAtB,KAAkC,KAAtE,EAA4E;AACxE,YAAME,IAAI,GAAG,IAAIX,WAAJ,EAAb;AACA,UAAIY,mBAAmB,GAAG,0BAA1B;AACA,YAAMC,OAAO,GAAG,YAAhB;AACA,UAAIC,IAAI,GAAG;AAAEC,QAAAA,KAAK,EAAEX,WAAW,CAACY,IAAZ,CAAiBD;AAA1B,OAAX;AAEA,aAAOJ,IAAI,CAACM,QAAL,CAAcH,IAAd,EAAoBF,mBAApB,EAAwCC,OAAxC,EAAiDK,IAAjD,CAAsDC,IAAI,IAAE;AAC/DC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACAZ,QAAAA,2BAA2B,CACvB;AACIC,UAAAA,WAAW,EAAEW,IAAI,CAACK,MADtB;AAEIf,UAAAA,OAAO,EAAE;AAFb,SADuB,CAA3B;AAMA,eAAOU,IAAP;AACH,OATM,EASJM,KATI,CASGC,KAAD,IAAU;AACfN,QAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACA,eAAOA,KAAP;AACC,OAZE,CAAP;AAaH;AACJ;;AAGD,sBACI,uDACI;AAAK,IAAA,SAAS,EAAEvB,OAAO,CAACwB,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQvB,WAAW,IAAE,EAAb,IAAmBA,WAAW,CAACK,OAAZ,IAAqB,IAAxC,gBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ,EAAkBL,WAAW,CAACY,IAAZ,CAAiBY,IAAnC,CADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAJ,EAAmBxB,WAAW,CAACY,IAAZ,CAAiBD,KAApC,CAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAJ,EAAmCX,WAAW,CAACY,IAAZ,CAAiBa,UAApD,CAHA,CADR,GAOAzB,WAAW,CAACK,OAAZ,IAAqB,KAArB,GACAL,WAAW,CAAC0B,OADZ,gBAGA,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAC,MAAlB;AAAyB,IAAA,KAAK,EAAE,GAAhC;AAAqC,IAAA,MAAM,EAAE,GAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZR,CADA,eAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBA,eAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAlBA,eAmBA,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAI1B,WAAzB;AAAsC,IAAA,iBAAiB,EAAIG,2BAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBA,eAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBA,eAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBArBA,eAsBA,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAIH,WAA5B;AAAyC,IAAA,eAAe,EAAIE,qBAA5D;AAAmF,IAAA,iBAAiB,EAAII,iBAAxG;AAA2H,IAAA,oBAAoB,EAAIH,2BAAnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBA,CADJ,CADJ;AA4BH","sourcesContent":["import React , {useEffect}  from 'react'\nimport {useState} from 'react'\nimport {Card} from '@material-ui/core'\nimport {useDispatch,useSelector} from 'react-redux'\nimport {loadUserAction} from '../../store/actions/User/ProfileActions'\nimport {useStyles} from '../../styles'\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport ContactDeck from './ContactDeck'\nimport ConnectionDeck from './ConnectionDeck'\nimport HttpService from '../../services/HttpService'\n\nexport default function ProfileView() {\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const userProfile = useSelector(state => state.userProfile.userProfile);\n\n    useEffect(() => {\n        dispatch(loadUserAction());\n    }, [dispatch])\n\n    const [connectionsListParent, updateConnectionsListParent] = useState(\n        {\n            connections:[],\n            success: false\n        }\n    )\n\n    function getAllConnections(){\n        if (userProfile.success === true && connectionsListParent.success === false){\n            const http = new HttpService();\n            let get_connections_url = \"user/get-connected-users\"\n            const tokenId = \"user-token\"\n            let body = { email: userProfile.user.email }\n    \n            return http.postData(body ,get_connections_url,tokenId).then(data=>{\n                console.log(JSON.stringify(data));\n                updateConnectionsListParent(\n                    {\n                        connections: data.result,\n                        success: true\n                    }\n                )\n                return data;\n            }).catch((error)=> {\n                console.log(error)\n                return error; \n                });\n        }\n    }\n\n\n    return (\n        <>\n            <div className={classes.fullWidthProfile}>\n            <Card>\n                {\n                    userProfile!=\"\" && userProfile.success==true?\n                            <div>\n                            <h3><b>Name: </b>{userProfile.user.name}</h3>\n                            <h3><b>Email: </b>{userProfile.user.email}</h3>\n                            <h3><b>Account Creation Date: </b>{userProfile.user.created_at}</h3>\n                            </div>\n                    :\n                    userProfile.success==false ?\n                    userProfile.message\n                    :\n                    <Skeleton variant=\"rect\" width={210} height={118} />\n\n                }\n            </Card>\n            <br></br>\n            <h1>Contacts:</h1>\n            <ContactDeck userProf = {userProfile} updateConnections = {updateConnectionsListParent}/>\n            <br></br>\n            <h1>Connections:</h1>\n            <ConnectionDeck userProf = {userProfile} connectionsList = {connectionsListParent} updateConnections = {getAllConnections} updateConnectionList = {updateConnectionsListParent}/>\n            </div>\n        </>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}