{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ConnectionCard.js\";\nimport React, { useState } from \"react\";\nimport { Card } from '@material-ui/core';\nimport HttpService from '../../services/HttpService';\nimport DateTimePicker from 'react-datetime-picker';\n\nfunction ConnectionCard(props) {\n  console.log(props.connection.scheduled_date_time);\n  const [state, setState] = useState({\n    date: new Date(props.connection.scheduled_date_time)\n  });\n\n  function HandleCancel() {\n    console.log(props.connection.id);\n    const http = new HttpService();\n    let cancel_connection_url = \"user/cancel-connection/\" + props.connection.id;\n    const tokenId = \"user-token\";\n    let body = {\n      email: props.thisUser.user.email\n    };\n    return http.postData(body, cancel_connection_url, tokenId).then(data => {\n      console.log(JSON.stringify(data));\n      props.updateConnection({\n        connections: data.result,\n        success: true\n      });\n      return data;\n    }).catch(error => {\n      console.log(error);\n      return error;\n    });\n  }\n\n  function Update_date_time() {\n    const http = new HttpService();\n    let update_connection_url = \"user/update-date-time\";\n    const tokenId = \"user-token\";\n    let body = {\n      email: props.thisUser.user.email,\n      id: props.connection.id,\n      datetime: state.date\n    };\n    console.log(body);\n    return http.postData(body, update_connection_url, tokenId).then(data => {\n      console.log(JSON.stringify(data));\n      props.updateConnection({\n        connections: data.result,\n        success: true\n      });\n      return data;\n    }).catch(error => {\n      console.log(error);\n      return error;\n    });\n  }\n\n  function onChange(updatedDate) {\n    console.log(updatedDate);\n    setState({\n      date: updatedDate\n    });\n  }\n\n  function isEpoch(dateToTest) {\n    return dateToTest.getFullYear() === 2014 && // getMonth is 0-indexed\n    dateToTest.getMonth() === 11 && dateToTest.getDate() == 25;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, console.log(props.connection), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, props.connection.id, props.connection.email === props.thisUser.user.email ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, props.connection.connection_email) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, props.connection.email), isEpoch(state.date) ? /*#__PURE__*/React.createElement(DateTimePicker, {\n    value: null,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(DateTimePicker, {\n    value: state.date,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: HandleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Cancel Call\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: Update_date_time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"Update\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default ConnectionCard;","map":{"version":3,"sources":["/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ConnectionCard.js"],"names":["React","useState","Card","HttpService","DateTimePicker","ConnectionCard","props","console","log","connection","scheduled_date_time","state","setState","date","Date","HandleCancel","id","http","cancel_connection_url","tokenId","body","email","thisUser","user","postData","then","data","JSON","stringify","updateConnection","connections","result","success","catch","error","Update_date_time","update_connection_url","datetime","onChange","updatedDate","isEpoch","dateToTest","getFullYear","getMonth","getDate","connection_email"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\nimport {Card} from '@material-ui/core'\nimport HttpService from '../../services/HttpService'\nimport DateTimePicker from 'react-datetime-picker'\n\nfunction ConnectionCard(props){\n    console.log(props.connection.scheduled_date_time)\n\n    const [state, setState] = useState(\n        {\n            date: new Date(props.connection.scheduled_date_time)\n        }\n    )\n\n    function HandleCancel(){\n        console.log(props.connection.id)\n        const http = new HttpService();\n        let cancel_connection_url = \"user/cancel-connection/\" + props.connection.id\n        const tokenId = \"user-token\"\n        let body = { email: props.thisUser.user.email }\n\n        return http.postData(body ,cancel_connection_url,tokenId).then(data=>{\n            console.log(JSON.stringify(data));\n            props.updateConnection(\n                {\n                    connections: data.result,\n                    success: true\n                }\n            )\n            return data;\n        }).catch((error)=> {\n            console.log(error)\n            return error; \n            });\n    }\n\n    function Update_date_time(){\n        const http = new HttpService();\n        let update_connection_url = \"user/update-date-time\"\n        const tokenId = \"user-token\"\n        let body =  { \n                    email: props.thisUser.user.email,\n                    id: props.connection.id,\n                    datetime: state.date\n                    }\n        console.log(body)\n        return http.postData(body ,update_connection_url,tokenId).then(data=>{\n            console.log(JSON.stringify(data));\n            props.updateConnection(\n                {\n                    connections: data.result,\n                    success: true\n                }\n            )\n            return data;\n        }).catch((error)=> {\n            console.log(error)\n            return error; \n            });\n    }\n\n    function onChange(updatedDate){\n        console.log(updatedDate)\n        setState({ date: updatedDate })\n    } \n\n    function isEpoch(dateToTest){\n        return (dateToTest.getFullYear() === 2014) &&\n                // getMonth is 0-indexed\n                (dateToTest.getMonth() === 11) &&\n                (dateToTest.getDate() == 25);\n    }\n\n\n    return (\n        <div>\n        {console.log(props.connection)}\n        <br></br>\n        <div >\n            {props.connection.id}\n            {\n            props.connection.email === props.thisUser.user.email ? \n                <div>{props.connection.connection_email}</div> \n                : \n                <div>{props.connection.email}</div>  \n            }\n            \n            {\n                isEpoch(state.date)?\n                <DateTimePicker value = {null} onChange = {onChange}/>\n                :\n                <DateTimePicker value = {state.date} onChange = {onChange}/>\n            }\n            {/* <DateTimePicker value = {state.date} onChange = {onChange}/> */}\n\n            <button onClick = {HandleCancel}>Cancel Call</button>\n            <button onClick = {Update_date_time}>Update</button>\n        </div>\n        <hr></hr>\n        <br></br>\n        </div>\n    )\n}\n\nexport default ConnectionCard"]},"metadata":{},"sourceType":"module"}