{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ConnectionDeck.js\";\nimport ConnectionCard from './ConnectionCard';\nimport HttpService from '../../services/HttpService';\n\nfunction ConnectionDeck(props) {\n  const [connectionList, updateConnectionList] = useState({\n    connections: [],\n    success: false\n  });\n\n  function getAllConnections() {\n    if (props.userProf.success === true && connectionList.success === false) {\n      const http = new HttpService();\n      let get_connections_url = \"user/get-connected-users\";\n      const tokenId = \"user-token\";\n      let body = {\n        email: props.userProf.user.email\n      };\n      return http.postData(body, get_connections_url, tokenId).then(data => {\n        console.log(JSON.stringify(data));\n        updateConnectionList({\n          connections: data.result,\n          success: true\n        });\n        return data;\n      }).catch(error => {\n        console.log(error);\n        return error;\n      });\n    }\n  }\n\n  let connectionCardList = connectionList.connections.map(item => /*#__PURE__*/React.createElement(ConnectionCard, {\n    connection: item,\n    thisUser: props.userProf,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 69\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, connectionList.success ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, connectionCardList) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"Loading...\"), getAllConnections));\n}\n\nexport default ConnectionDeck;","map":{"version":3,"sources":["/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ConnectionDeck.js"],"names":["ConnectionCard","HttpService","ConnectionDeck","props","connectionList","updateConnectionList","useState","connections","success","getAllConnections","userProf","http","get_connections_url","tokenId","body","email","user","postData","then","data","console","log","JSON","stringify","result","catch","error","connectionCardList","map","item"],"mappings":";AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAE1B,QAAM,CAACC,cAAD,EAAiBC,oBAAjB,IAAyCC,QAAQ,CACnD;AACIC,IAAAA,WAAW,EAAC,EADhB;AAEIC,IAAAA,OAAO,EAAE;AAFb,GADmD,CAAvD;;AAOA,WAASC,iBAAT,GAA4B;AACxB,QAAIN,KAAK,CAACO,QAAN,CAAeF,OAAf,KAA2B,IAA3B,IAAmCJ,cAAc,CAACI,OAAf,KAA2B,KAAlE,EAAwE;AACpE,YAAMG,IAAI,GAAG,IAAIV,WAAJ,EAAb;AACA,UAAIW,mBAAmB,GAAG,0BAA1B;AACA,YAAMC,OAAO,GAAG,YAAhB;AACA,UAAIC,IAAI,GAAG;AAAEC,QAAAA,KAAK,EAAEZ,KAAK,CAACO,QAAN,CAAeM,IAAf,CAAoBD;AAA7B,OAAX;AAEA,aAAOJ,IAAI,CAACM,QAAL,CAAcH,IAAd,EAAoBF,mBAApB,EAAwCC,OAAxC,EAAiDK,IAAjD,CAAsDC,IAAI,IAAE;AAC/DC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACAd,QAAAA,oBAAoB,CAChB;AACIE,UAAAA,WAAW,EAAEY,IAAI,CAACK,MADtB;AAEIhB,UAAAA,OAAO,EAAE;AAFb,SADgB,CAApB;AAMA,eAAOW,IAAP;AACH,OATM,EASJM,KATI,CASGC,KAAD,IAAU;AACfN,QAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACA,eAAOA,KAAP;AACC,OAZE,CAAP;AAaH;AACJ;;AAED,MAAIC,kBAAkB,GAAGvB,cAAc,CAACG,WAAf,CAA2BqB,GAA3B,CAA+BC,IAAI,iBAAI,oBAAC,cAAD;AAAgB,IAAA,UAAU,EAAIA,IAA9B;AAAoC,IAAA,QAAQ,EAAI1B,KAAK,CAACO,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAvC,CAAzB;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQN,cAAc,CAACI,OAAf,gBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCmB,kBADD,CADJ,gBAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEClB,iBAFD,CAPZ,CADJ;AAeH;;AAED,eAAeP,cAAf","sourcesContent":["import ConnectionCard from './ConnectionCard'\nimport HttpService from '../../services/HttpService'\n\nfunction ConnectionDeck(props){\n\n    const [connectionList, updateConnectionList] = useState(\n        {\n            connections:[],\n            success: false\n        }\n    )\n\n    function getAllConnections(){\n        if (props.userProf.success === true && connectionList.success === false){\n            const http = new HttpService();\n            let get_connections_url = \"user/get-connected-users\"\n            const tokenId = \"user-token\"\n            let body = { email: props.userProf.user.email }\n    \n            return http.postData(body ,get_connections_url,tokenId).then(data=>{\n                console.log(JSON.stringify(data));\n                updateConnectionList(\n                    {\n                        connections: data.result,\n                        success: true\n                    }\n                )\n                return data;\n            }).catch((error)=> {\n                console.log(error)\n                return error; \n                });\n        }\n    }\n\n    let connectionCardList = connectionList.connections.map(item => <ConnectionCard connection = {item} thisUser = {props.userProf}/>)\n\n    return (\n        <div>\n            {\n                connectionList.success?\n                    <div>\n                    {connectionCardList}\n                    </div>\n                :\n                    <div>\n                    <h1>Loading...</h1>\n                    {getAllConnections}\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default ConnectionDeck"]},"metadata":{},"sourceType":"module"}