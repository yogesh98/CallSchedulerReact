{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ProfileView.js\";\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Card } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadUserAction } from '../../store/actions/User/ProfileActions';\nimport { useStyles } from '../../styles';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport ContactCard from './ContactCard';\nimport ConnectionCard from './ConnectionCard';\nimport HttpService from '../../services/HttpService';\nexport default function ProfileView() {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const userProfile = useSelector(state => state.userProfile.userProfile);\n  useEffect(() => {\n    dispatch(loadUserAction());\n  }, [dispatch]);\n  const [contactList, updateContactList] = useState({\n    users: [],\n    success: false\n  });\n  const [connectionList, updateConnectionList] = useState({\n    connections: [],\n    success: false\n  });\n\n  function getAllUsers() {\n    if (contactList.success === false) {\n      const http = new HttpService();\n      let registered_users = \"user/get-registered-users\";\n      const tokenId = \"user-token\";\n      return http.getData(registered_users, tokenId).then(data => {\n        console.log(JSON.stringify(data));\n        updateContactList({\n          users: data.users,\n          success: true\n        });\n        return data;\n      }).catch(error => {\n        console.log(error);\n        return error;\n      });\n    }\n  }\n\n  function getAllConnections() {\n    if (userProfile.success === true && connectionList.success === false) {\n      const http = new HttpService();\n      let get_connections_url = \"user/get-connected-users\";\n      const tokenId = \"user-token\";\n      let body = {\n        email: userProfile.user.email\n      };\n      return http.postData(body, get_connections_url, tokenId).then(data => {\n        console.log(JSON.stringify(data));\n        updateConnectionList({\n          connections: data.result,\n          success: true\n        });\n        return data;\n      }).catch(error => {\n        console.log(error);\n        return error;\n      });\n    }\n  } // //let contacts\n  // useEffect(() => {\n  //     getAllUsers();\n  //    // contacts = contactList.users.map(item => <ContactCard key = {item.id} user={item} thisUser = {userProfile} \n  //         //updateConnections = {updateConnectionList} prevContactList = {contactList} />)\n  // }, [contactList])\n  // //let connectionCardList\n  // useEffect(() => {\n  //     getAllConnections();\n  //     //connectionCardList = connectionList.connections.map(item => <ConnectionCard connection = {item} thisUser = {userProfile}/>)\n  // }, [connectionList])\n\n\n  getAllUsers();\n  getAllConnections();\n  let contacts = contactList.users.map(item => /*#__PURE__*/React.createElement(ContactCard, {\n    key: item.id,\n    user: item,\n    thisUser: userProfile,\n    updateConnections: updateConnectionList,\n    prevContactList: contactList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 50\n    }\n  }));\n  let connectionCardList = connectionList.connections.map(item => /*#__PURE__*/React.createElement(ConnectionCard, {\n    connection: item,\n    thisUser: userProfile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 69\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fullWidthProfile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, userProfile != \"\" && userProfile.success == true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 33\n    }\n  }, \"Name: \"), userProfile.user.name), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 33\n    }\n  }, \"Email: \"), userProfile.user.email), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 33\n    }\n  }, \"Account Creation Date: \"), userProfile.user.created_at)) : userProfile.success == false ? userProfile.message : /*#__PURE__*/React.createElement(Skeleton, {\n    variant: \"rect\",\n    width: 210,\n    height: 118,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), contactList.success ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, contacts) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, \"Loading...\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }), connectionList.success ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, connectionCardList) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }, \"Loading...\"), getAllConnections)));\n}","map":{"version":3,"sources":["/Users/yogeshpatel/Developer/call-scheduler-react/src/views/User/ProfileView.js"],"names":["React","useEffect","useState","Card","useDispatch","useSelector","loadUserAction","useStyles","Skeleton","ContactCard","ConnectionCard","HttpService","ProfileView","dispatch","classes","userProfile","state","contactList","updateContactList","users","success","connectionList","updateConnectionList","connections","getAllUsers","http","registered_users","tokenId","getData","then","data","console","log","JSON","stringify","catch","error","getAllConnections","get_connections_url","body","email","user","postData","result","contacts","map","item","id","connectionCardList","fullWidthProfile","name","created_at","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAAQC,IAAR,QAAmB,mBAAnB;AACA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,SAAQC,cAAR,QAA6B,yCAA7B;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,eAAe,SAASC,WAAT,GAAuB;AAElC,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,OAAO,GAAGP,SAAS,EAAzB;AACA,QAAMQ,WAAW,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACD,WAAN,CAAkBA,WAA5B,CAA/B;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACH,GAFQ,EAEN,CAACO,QAAD,CAFM,CAAT;AAIA,QAAM,CAACI,WAAD,EAAcC,iBAAd,IAAmChB,QAAQ,CAC7C;AACIiB,IAAAA,KAAK,EAAC,EADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GAD6C,CAAjD;AAOA,QAAM,CAACC,cAAD,EAAiBC,oBAAjB,IAAyCpB,QAAQ,CACnD;AACIqB,IAAAA,WAAW,EAAC,EADhB;AAEIH,IAAAA,OAAO,EAAE;AAFb,GADmD,CAAvD;;AAOA,WAASI,WAAT,GAAsB;AAClB,QAAIP,WAAW,CAACG,OAAZ,KAAwB,KAA5B,EAAkC;AAC9B,YAAMK,IAAI,GAAG,IAAId,WAAJ,EAAb;AACA,UAAIe,gBAAgB,GAAG,2BAAvB;AACA,YAAMC,OAAO,GAAG,YAAhB;AAEA,aAAOF,IAAI,CAACG,OAAL,CAAaF,gBAAb,EAA8BC,OAA9B,EAAuCE,IAAvC,CAA4CC,IAAI,IAAE;AACrDC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACAZ,QAAAA,iBAAiB,CACb;AACIC,UAAAA,KAAK,EAAEW,IAAI,CAACX,KADhB;AAEIC,UAAAA,OAAO,EAAE;AAFb,SADa,CAAjB;AAMA,eAAOU,IAAP;AACH,OATM,EASJK,KATI,CASGC,KAAD,IAAU;AACfL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,eAAOA,KAAP;AACC,OAZE,CAAP;AAaH;AACJ;;AAED,WAASC,iBAAT,GAA4B;AACxB,QAAItB,WAAW,CAACK,OAAZ,KAAwB,IAAxB,IAAgCC,cAAc,CAACD,OAAf,KAA2B,KAA/D,EAAqE;AACjE,YAAMK,IAAI,GAAG,IAAId,WAAJ,EAAb;AACA,UAAI2B,mBAAmB,GAAG,0BAA1B;AACA,YAAMX,OAAO,GAAG,YAAhB;AACA,UAAIY,IAAI,GAAG;AAAEC,QAAAA,KAAK,EAAEzB,WAAW,CAAC0B,IAAZ,CAAiBD;AAA1B,OAAX;AAEA,aAAOf,IAAI,CAACiB,QAAL,CAAcH,IAAd,EAAoBD,mBAApB,EAAwCX,OAAxC,EAAiDE,IAAjD,CAAsDC,IAAI,IAAE;AAC/DC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACAR,QAAAA,oBAAoB,CAChB;AACIC,UAAAA,WAAW,EAAEO,IAAI,CAACa,MADtB;AAEIvB,UAAAA,OAAO,EAAE;AAFb,SADgB,CAApB;AAMA,eAAOU,IAAP;AACH,OATM,EASJK,KATI,CASGC,KAAD,IAAU;AACfL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,eAAOA,KAAP;AACC,OAZE,CAAP;AAaH;AACJ,GAnEiC,CAqElC;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;AAEAZ,EAAAA,WAAW;AACXa,EAAAA,iBAAiB;AAEjB,MAAIO,QAAQ,GAAG3B,WAAW,CAACE,KAAZ,CAAkB0B,GAAlB,CAAsBC,IAAI,iBAAI,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAIA,IAAI,CAACC,EAAzB;AAA6B,IAAA,IAAI,EAAED,IAAnC;AAAyC,IAAA,QAAQ,EAAI/B,WAArD;AACzC,IAAA,iBAAiB,EAAIO,oBADoB;AACE,IAAA,eAAe,EAAIL,WADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA9B,CAAf;AAEA,MAAI+B,kBAAkB,GAAG3B,cAAc,CAACE,WAAf,CAA2BsB,GAA3B,CAA+BC,IAAI,iBAAI,oBAAC,cAAD;AAAgB,IAAA,UAAU,EAAIA,IAA9B;AAAoC,IAAA,QAAQ,EAAI/B,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAvC,CAAzB;AAEA,sBACI,uDACI;AAAK,IAAA,SAAS,EAAED,OAAO,CAACmC,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQlC,WAAW,IAAE,EAAb,IAAmBA,WAAW,CAACK,OAAZ,IAAqB,IAAxC,gBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ,EAAkBL,WAAW,CAAC0B,IAAZ,CAAiBS,IAAnC,CADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAJ,EAAmBnC,WAAW,CAAC0B,IAAZ,CAAiBD,KAApC,CAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAJ,EAAmCzB,WAAW,CAAC0B,IAAZ,CAAiBU,UAApD,CAHA,CADR,GAOApC,WAAW,CAACK,OAAZ,IAAqB,KAArB,GACAL,WAAW,CAACqC,OADZ,gBAGA,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAC,MAAlB;AAAyB,IAAA,KAAK,EAAE,GAAhC;AAAqC,IAAA,MAAM,EAAE,GAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZR,CADA,eAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBA,EAmBInC,WAAW,CAACG,OAAZ,gBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCwB,QADD,CADJ,gBAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,CAxBR,eA4BY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BZ,EA8BIvB,cAAc,CAACD,OAAf,gBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC4B,kBADD,CADJ,gBAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAECX,iBAFD,CAnCR,CADJ,CADJ;AA6CH","sourcesContent":["import React , {useEffect}  from 'react'\nimport {useState} from 'react'\nimport {Card} from '@material-ui/core'\nimport {useDispatch,useSelector} from 'react-redux'\nimport {loadUserAction} from '../../store/actions/User/ProfileActions'\nimport {useStyles} from '../../styles'\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport ContactCard from './ContactCard'\nimport ConnectionCard from './ConnectionCard'\nimport HttpService from '../../services/HttpService'\n\nexport default function ProfileView() {\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const userProfile = useSelector(state => state.userProfile.userProfile);\n\n    useEffect(() => {\n        dispatch(loadUserAction());\n    }, [dispatch])\n\n    const [contactList, updateContactList] = useState(\n        {\n            users:[],\n            success: false\n        }\n    )\n\n    const [connectionList, updateConnectionList] = useState(\n        {\n            connections:[],\n            success: false\n        }\n    )\n    \n    function getAllUsers(){\n        if (contactList.success === false){\n            const http = new HttpService();\n            let registered_users = \"user/get-registered-users\";\n            const tokenId = \"user-token\";\n\n            return http.getData(registered_users,tokenId).then(data=>{\n                console.log(JSON.stringify(data));\n                updateContactList(\n                    {\n                        users: data.users,\n                        success: true  \n                    }\n                )\n                return data;\n            }).catch((error)=> {\n                console.log(error)\n                return error; \n                });\n        }\n    }\n\n    function getAllConnections(){\n        if (userProfile.success === true && connectionList.success === false){\n            const http = new HttpService();\n            let get_connections_url = \"user/get-connected-users\"\n            const tokenId = \"user-token\"\n            let body = { email: userProfile.user.email }\n    \n            return http.postData(body ,get_connections_url,tokenId).then(data=>{\n                console.log(JSON.stringify(data));\n                updateConnectionList(\n                    {\n                        connections: data.result,\n                        success: true\n                    }\n                )\n                return data;\n            }).catch((error)=> {\n                console.log(error)\n                return error; \n                });\n        }\n    }\n\n    // //let contacts\n\n    // useEffect(() => {\n    //     getAllUsers();\n    //    // contacts = contactList.users.map(item => <ContactCard key = {item.id} user={item} thisUser = {userProfile} \n    //         //updateConnections = {updateConnectionList} prevContactList = {contactList} />)\n    // }, [contactList])\n\n    // //let connectionCardList\n\n    // useEffect(() => {\n    //     getAllConnections();\n    //     //connectionCardList = connectionList.connections.map(item => <ConnectionCard connection = {item} thisUser = {userProfile}/>)\n    // }, [connectionList])\n\n    getAllUsers()\n    getAllConnections()\n\n    let contacts = contactList.users.map(item => <ContactCard key = {item.id} user={item} thisUser = {userProfile} \n        updateConnections = {updateConnectionList} prevContactList = {contactList} />)\n    let connectionCardList = connectionList.connections.map(item => <ConnectionCard connection = {item} thisUser = {userProfile}/>)\n\n    return (\n        <>\n            <div className={classes.fullWidthProfile}>\n            <Card>\n                {\n                    userProfile!=\"\" && userProfile.success==true?\n                            <div>\n                            <h3><b>Name: </b>{userProfile.user.name}</h3>\n                            <h3><b>Email: </b>{userProfile.user.email}</h3>\n                            <h3><b>Account Creation Date: </b>{userProfile.user.created_at}</h3>\n                            </div>\n                    :\n                    userProfile.success==false ?\n                    userProfile.message\n                    :\n                    <Skeleton variant=\"rect\" width={210} height={118} />\n\n                }\n            </Card>\n            <br></br>\n            {\n                contactList.success?\n                    <div>\n                    {contacts}\n                    </div>\n                :\n                    <div>\n                    <h1>Loading...</h1>\n                    </div>\n            }\n                        <br></br>\n            {\n                connectionList.success?\n                    <div>\n                    {connectionCardList}\n                    </div>\n                :\n                    <div>\n                    <h1>Loading...</h1>\n                    {getAllConnections}\n                    </div>\n            }\n            </div>\n        </>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}